name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Cache node_modules
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-${{ matrix.node-version }}-
          ${{ runner.os }}-node-

    - name: Install dependencies
      run: npm ci

    - name: Cache build output
      uses: actions/cache@v3
      with:
        path: dist
        key: ${{ runner.os }}-build-${{ matrix.node-version }}-${{ hashFiles('src/**/*.ts') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ matrix.node-version }}-
          ${{ runner.os }}-build-

    - name: Build project with esbuild
      run: npm run build

    - name: Run unit tests
      run: npm test -- --testPathPattern="(client|utils)\.test\.ts$"

    - name: Run integration tests
      run: npm test -- --testPathPattern="integration\.test\.ts$"
      env:
        RPC_URL: https://ethereum-rpc.publicnode.com

    - name: Run example tests
      run: npm test -- --testPathPattern="examples\.test\.ts$"
      env:
        RPC_URL: https://ethereum-rpc.publicnode.com

    - name: Generate coverage report
      run: npm run test:coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build-and-test-cli:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'

    - name: Cache node_modules
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-20.x-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-20.x-
          ${{ runner.os }}-node-

    - name: Install dependencies
      run: npm ci

    - name: Cache build output
      uses: actions/cache@v3
      with:
        path: dist
        key: ${{ runner.os }}-build-cli-${{ hashFiles('src/**/*.ts') }}
        restore-keys: |
          ${{ runner.os }}-build-cli-
          ${{ runner.os }}-build-

    - name: Build project with esbuild
      run: npm run build

    - name: Test CLI commands
      run: |
        # Test basic CLI functionality
        node dist/cli.js -u https://ethereum-rpc.publicnode.com info
        node dist/cli.js -u https://ethereum-rpc.publicnode.com block-number
        node dist/cli.js -u https://ethereum-rpc.publicnode.com balance 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045
        node dist/cli.js -u https://ethereum-rpc.publicnode.com code 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48
        node dist/cli.js -u https://ethereum-rpc.publicnode.com call 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48 -d 0x18160ddd

    - name: Test CLI output formats
      run: |
        # Test JSON output
        node dist/cli.js -u https://ethereum-rpc.publicnode.com -f json info
        # Test pretty output (default)
        node dist/cli.js -u https://ethereum-rpc.publicnode.com -f pretty info

  security-audit:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm audit --audit-level moderate

    - name: Check for known vulnerabilities
      run: npm audit --audit-level high
