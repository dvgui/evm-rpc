name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js 22.x
      uses: actions/setup-node@v4
      with:
        node-version: 22.x
        cache: 'yarn'

    - name: Cache node_modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.yarn/cache
          **/node_modules
        key: ${{ runner.os }}-yarn-22.x-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-22.x-
          ${{ runner.os }}-yarn-

    - name: Install dependencies
      run: yarn install --frozen-lockfile

    - name: Cache build output
      uses: actions/cache@v3
      with:
        path: dist
        key: ${{ runner.os }}-build-release-${{ hashFiles('src/**/*.ts') }}
        restore-keys: |
          ${{ runner.os }}-build-release-
          ${{ runner.os }}-build-

    - name: Run tests
      run: yarn test

    - name: Build project with esbuild
      run: yarn build

  create-release:
    needs: test
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js 22.x
      uses: actions/setup-node@v4
      with:
        node-version: 22.x
        cache: 'yarn'

    - name: Cache node_modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.yarn/cache
          **/node_modules
        key: ${{ runner.os }}-yarn-22.x-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-22.x-
          ${{ runner.os }}-yarn-

    - name: Install dependencies
      run: yarn install --frozen-lockfile

    - name: Build project with esbuild
      run: yarn build

    - name: Create release archive
      run: |
        mkdir -p release
        cp -r dist package.json yarn.lock README.md release/
        cd release
        tar -czf ../evm-rpc-framework-${GITHUB_REF#refs/tags/}.tar.gz .

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        name: EVM RPC Framework ${{ github.ref_name }}
        body: |
          # EVM RPC Framework v${{ github.ref_name }}

          Initial release of a TypeScript framework for EVM blockchain RPC interactions.

          ## Features

          - CLI tool for querying EVM-compatible chains
          - Block finalization status support (latest, safe, finalized, pending, earliest)
          - Read-only operations with full TypeScript support
          - Programmatic API with EVMRPCClient class
          - Built-in address and transaction validation

          ## Commands

          - Get blockchain info, block data, account balances
          - Make contract calls and retrieve transaction details
          - Check block finalization status
          - Support for all standard EVM RPC methods

          ## Installation

          1. Download and extract the release archive
          2. Run `yarn install` to install dependencies  
          3. Use `node dist/cli.js --help` to see available commands

          ## Quick Start

          ```bash
          node dist/cli.js -u YOUR_RPC_URL info
          ```

          Perfect for blockchain developers needing reliable EVM chain data access without private keys.
        files: |
          evm-rpc-framework-${{ github.ref_name }}.tar.gz
        draft: false
        prerelease: false
